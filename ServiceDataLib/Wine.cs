//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ServiceDataLib
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Year))]
    [KnownType(typeof(Taste))]
    [KnownType(typeof(Color))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(Region))]
    [KnownType(typeof(WMMW))]
    public partial class Wine
    {
        #region Primitive Properties
        [DataMember]
        public virtual int wine_id
        {
            get;
            set;
        }
        [DataMember]
        public virtual int mood_code
        {
            get;
            set;
        }
        [DataMember]
        public virtual int taste_code
        {
            get { return _taste_code; }
            set
            {
                if (_taste_code != value)
                {
                    if (Taste != null && Taste.taste_id != value)
                    {
                        Taste = null;
                    }
                    _taste_code = value;
                }
            }
        }
        private int _taste_code;
        [DataMember]
        public virtual int color_code
        {
            get { return _color_code; }
            set
            {
                if (_color_code != value)
                {
                    if (Color != null && Color.color_id != value)
                    {
                        Color = null;
                    }
                    _color_code = value;
                }
            }
        }
        private int _color_code;
        [DataMember]
        public virtual int years_code
        {
            get { return _years_code; }
            set
            {
                if (_years_code != value)
                {
                    if (Year != null && Year.year_id != value)
                    {
                        Year = null;
                    }
                    _years_code = value;
                }
            }
        }
        private int _years_code;
        [DataMember]
        public virtual int country_code
        {
            get { return _country_code; }
            set
            {
                if (_country_code != value)
                {
                    if (Country != null && Country.country_id != value)
                    {
                        Country = null;
                    }
                    _country_code = value;
                }
            }
        }
        private int _country_code;
        [DataMember]
        public virtual int region_code
        {
            get { return _region_code; }
            set
            {
                if (_region_code != value)
                {
                    if (Region != null && Region.region_id != value)
                    {
                        Region = null;
                    }
                    _region_code = value;
                }
            }
        }
        private int _region_code;
        [DataMember]
        public virtual string name
        {
            get;
            set;
        }
        [DataMember]
        public virtual string description
        {
            get;
            set;
        }
        [DataMember]
        public virtual string pic_url
        {
            get;
            set;
        }
        [DataMember]
        public virtual string price
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Year Year
        {
            get { return _year; }
            set
            {
                if (!ReferenceEquals(_year, value))
                {
                    var previousValue = _year;
                    _year = value;
                    FixupYear(previousValue);
                }
            }
        }
        private Year _year;
        
    
        [DataMember]
        public virtual Taste Taste
        {
            get { return _taste; }
            set
            {
                if (!ReferenceEquals(_taste, value))
                {
                    var previousValue = _taste;
                    _taste = value;
                    FixupTaste(previousValue);
                }
            }
        }
        private Taste _taste;
        
    
        [DataMember]
        public virtual Color Color
        {
            get { return _color; }
            set
            {
                if (!ReferenceEquals(_color, value))
                {
                    var previousValue = _color;
                    _color = value;
                    FixupColor(previousValue);
                }
            }
        }
        private Color _color;
        
    
        [DataMember]
        public virtual Country Country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    FixupCountry(previousValue);
                }
            }
        }
        private Country _country;
        
    
        [DataMember]
        public virtual Region Region
        {
            get { return _region; }
            set
            {
                if (!ReferenceEquals(_region, value))
                {
                    var previousValue = _region;
                    _region = value;
                    FixupRegion(previousValue);
                }
            }
        }
        private Region _region;
        
    
        [DataMember]
        public virtual ICollection<WMMW> WMMWs
        {
            get
            {
                if (_wMMWs == null)
                {
                    var newCollection = new FixupCollection<WMMW>();
                    newCollection.CollectionChanged += FixupWMMWs;
                    _wMMWs = newCollection;
                }
                return _wMMWs;
            }
            set
            {
                if (!ReferenceEquals(_wMMWs, value))
                {
                    var previousValue = _wMMWs as FixupCollection<WMMW>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWMMWs;
                    }
                    _wMMWs = value;
                    var newValue = value as FixupCollection<WMMW>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWMMWs;
                    }
                }
            }
        }
        private ICollection<WMMW> _wMMWs;

        #endregion
        #region Association Fixup
    
        private void FixupYear(Year previousValue)
        {
            if (previousValue != null && previousValue.Wine.Contains(this))
            {
                previousValue.Wine.Remove(this);
            }
    
            if (Year != null)
            {
                if (!Year.Wine.Contains(this))
                {
                    Year.Wine.Add(this);
                }
                if (years_code != Year.year_id)
                {
                    years_code = Year.year_id;
                }
            }
        }
    
        private void FixupTaste(Taste previousValue)
        {
            if (previousValue != null && previousValue.Wine.Contains(this))
            {
                previousValue.Wine.Remove(this);
            }
    
            if (Taste != null)
            {
                if (!Taste.Wine.Contains(this))
                {
                    Taste.Wine.Add(this);
                }
                if (taste_code != Taste.taste_id)
                {
                    taste_code = Taste.taste_id;
                }
            }
        }
    
        private void FixupColor(Color previousValue)
        {
            if (previousValue != null && previousValue.Wine.Contains(this))
            {
                previousValue.Wine.Remove(this);
            }
    
            if (Color != null)
            {
                if (!Color.Wine.Contains(this))
                {
                    Color.Wine.Add(this);
                }
                if (color_code != Color.color_id)
                {
                    color_code = Color.color_id;
                }
            }
        }
    
        private void FixupCountry(Country previousValue)
        {
            if (previousValue != null && previousValue.Wine.Contains(this))
            {
                previousValue.Wine.Remove(this);
            }
    
            if (Country != null)
            {
                if (!Country.Wine.Contains(this))
                {
                    Country.Wine.Add(this);
                }
                if (country_code != Country.country_id)
                {
                    country_code = Country.country_id;
                }
            }
        }
    
        private void FixupRegion(Region previousValue)
        {
            if (previousValue != null && previousValue.Wine.Contains(this))
            {
                previousValue.Wine.Remove(this);
            }
    
            if (Region != null)
            {
                if (!Region.Wine.Contains(this))
                {
                    Region.Wine.Add(this);
                }
                if (region_code != Region.region_id)
                {
                    region_code = Region.region_id;
                }
            }
        }
    
        private void FixupWMMWs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WMMW item in e.NewItems)
                {
                    item.Wine = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WMMW item in e.OldItems)
                {
                    if (ReferenceEquals(item.Wine, this))
                    {
                        item.Wine = null;
                    }
                }
            }
        }

        #endregion
    }
}
