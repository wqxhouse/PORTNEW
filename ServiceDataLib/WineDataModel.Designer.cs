//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineColor", "Colors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Color), "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Wine), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_CountryRegion", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Country), "Regions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Region), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineCountry", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Country), "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Wine), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_MoodWMMW", "Moods", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Mood), "WMMWs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.WMMW), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_PostReply", "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Post), "Replies", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Reply), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_UserPost", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.User), "Posts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Post), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineRegion", "Regions", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Region), "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Wine), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_UserReply", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.User), "Replies", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Reply), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineTaste", "Tastes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Taste), "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Wine), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineWMMW", "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Wine), "WMMWs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.WMMW), true)]
[assembly: EdmRelationshipAttribute("WineDataModel", "FK_WineYear", "Years", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(ServiceDataLib.Year), "Wines", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(ServiceDataLib.Wine), true)]

#endregion

namespace ServiceDataLib
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class WineDataEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“WineDataEntities”部分中的连接字符串初始化新 WineDataEntities 对象。
        /// </summary>
        public WineDataEntities() : base("name=WineDataEntities", "WineDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 WineDataEntities 对象。
        /// </summary>
        public WineDataEntities(string connectionString) : base(connectionString, "WineDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 WineDataEntities 对象。
        /// </summary>
        public WineDataEntities(EntityConnection connection) : base(connection, "WineDataEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Color> Colors
        {
            get
            {
                if ((_Colors == null))
                {
                    _Colors = base.CreateObjectSet<Color>("Colors");
                }
                return _Colors;
            }
        }
        private ObjectSet<Color> _Colors;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<FriendStatus> FriendStatuses
        {
            get
            {
                if ((_FriendStatuses == null))
                {
                    _FriendStatuses = base.CreateObjectSet<FriendStatus>("FriendStatuses");
                }
                return _FriendStatuses;
            }
        }
        private ObjectSet<FriendStatus> _FriendStatuses;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Mood> Moods
        {
            get
            {
                if ((_Moods == null))
                {
                    _Moods = base.CreateObjectSet<Mood>("Moods");
                }
                return _Moods;
            }
        }
        private ObjectSet<Mood> _Moods;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Post> Posts
        {
            get
            {
                if ((_Posts == null))
                {
                    _Posts = base.CreateObjectSet<Post>("Posts");
                }
                return _Posts;
            }
        }
        private ObjectSet<Post> _Posts;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Region> Regions
        {
            get
            {
                if ((_Regions == null))
                {
                    _Regions = base.CreateObjectSet<Region>("Regions");
                }
                return _Regions;
            }
        }
        private ObjectSet<Region> _Regions;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Reply> Replies
        {
            get
            {
                if ((_Replies == null))
                {
                    _Replies = base.CreateObjectSet<Reply>("Replies");
                }
                return _Replies;
            }
        }
        private ObjectSet<Reply> _Replies;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<sim_mat> sim_mat
        {
            get
            {
                if ((_sim_mat == null))
                {
                    _sim_mat = base.CreateObjectSet<sim_mat>("sim_mat");
                }
                return _sim_mat;
            }
        }
        private ObjectSet<sim_mat> _sim_mat;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Taste> Tastes
        {
            get
            {
                if ((_Tastes == null))
                {
                    _Tastes = base.CreateObjectSet<Taste>("Tastes");
                }
                return _Tastes;
            }
        }
        private ObjectSet<Taste> _Tastes;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Wine> Wines
        {
            get
            {
                if ((_Wines == null))
                {
                    _Wines = base.CreateObjectSet<Wine>("Wines");
                }
                return _Wines;
            }
        }
        private ObjectSet<Wine> _Wines;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<WMMW> WMMWs
        {
            get
            {
                if ((_WMMWs == null))
                {
                    _WMMWs = base.CreateObjectSet<WMMW>("WMMWs");
                }
                return _WMMWs;
            }
        }
        private ObjectSet<WMMW> _WMMWs;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Year> Years
        {
            get
            {
                if ((_Years == null))
                {
                    _Years = base.CreateObjectSet<Year>("Years");
                }
                return _Years;
            }
        }
        private ObjectSet<Year> _Years;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 Colors EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToColors(Color color)
        {
            base.AddObject("Colors", color);
        }
    
        /// <summary>
        /// 用于向 Countries EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// 用于向 FriendStatuses EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToFriendStatuses(FriendStatus friendStatus)
        {
            base.AddObject("FriendStatuses", friendStatus);
        }
    
        /// <summary>
        /// 用于向 Moods EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToMoods(Mood mood)
        {
            base.AddObject("Moods", mood);
        }
    
        /// <summary>
        /// 用于向 Posts EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToPosts(Post post)
        {
            base.AddObject("Posts", post);
        }
    
        /// <summary>
        /// 用于向 Regions EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRegions(Region region)
        {
            base.AddObject("Regions", region);
        }
    
        /// <summary>
        /// 用于向 Replies EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToReplies(Reply reply)
        {
            base.AddObject("Replies", reply);
        }
    
        /// <summary>
        /// 用于向 sim_mat EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTosim_mat(sim_mat sim_mat)
        {
            base.AddObject("sim_mat", sim_mat);
        }
    
        /// <summary>
        /// 用于向 Tastes EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTastes(Taste taste)
        {
            base.AddObject("Tastes", taste);
        }
    
        /// <summary>
        /// 用于向 Users EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// 用于向 Wines EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToWines(Wine wine)
        {
            base.AddObject("Wines", wine);
        }
    
        /// <summary>
        /// 用于向 WMMWs EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToWMMWs(WMMW wMMW)
        {
            base.AddObject("WMMWs", wMMW);
        }
    
        /// <summary>
        /// 用于向 Years EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToYears(Year year)
        {
            base.AddObject("Years", year);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Color")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Color : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Color 对象。
        /// </summary>
        /// <param name="color_id">color_id 属性的初始值。</param>
        /// <param name="color_description">color_description 属性的初始值。</param>
        public static Color CreateColor(global::System.Int32 color_id, global::System.String color_description)
        {
            Color color = new Color();
            color.color_id = color_id;
            color.color_description = color_description;
            return color;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 color_id
        {
            get
            {
                return _color_id;
            }
            set
            {
                if (_color_id != value)
                {
                    Oncolor_idChanging(value);
                    ReportPropertyChanging("color_id");
                    _color_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("color_id");
                    Oncolor_idChanged();
                }
            }
        }
        private global::System.Int32 _color_id;
        partial void Oncolor_idChanging(global::System.Int32 value);
        partial void Oncolor_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String color_description
        {
            get
            {
                return _color_description;
            }
            set
            {
                Oncolor_descriptionChanging(value);
                ReportPropertyChanging("color_description");
                _color_description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("color_description");
                Oncolor_descriptionChanged();
            }
        }
        private global::System.String _color_description;
        partial void Oncolor_descriptionChanging(global::System.String value);
        partial void Oncolor_descriptionChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineColor", "Wines")]
        public EntityCollection<Wine> Wines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Wine>("WineDataModel.FK_WineColor", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Wine>("WineDataModel.FK_WineColor", "Wines", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Country 对象。
        /// </summary>
        /// <param name="country_id">country_id 属性的初始值。</param>
        /// <param name="country_name">country_name 属性的初始值。</param>
        public static Country CreateCountry(global::System.Int32 country_id, global::System.String country_name)
        {
            Country country = new Country();
            country.country_id = country_id;
            country.country_name = country_name;
            return country;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 country_id
        {
            get
            {
                return _country_id;
            }
            set
            {
                if (_country_id != value)
                {
                    Oncountry_idChanging(value);
                    ReportPropertyChanging("country_id");
                    _country_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("country_id");
                    Oncountry_idChanged();
                }
            }
        }
        private global::System.Int32 _country_id;
        partial void Oncountry_idChanging(global::System.Int32 value);
        partial void Oncountry_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String country_name
        {
            get
            {
                return _country_name;
            }
            set
            {
                Oncountry_nameChanging(value);
                ReportPropertyChanging("country_name");
                _country_name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("country_name");
                Oncountry_nameChanged();
            }
        }
        private global::System.String _country_name;
        partial void Oncountry_nameChanging(global::System.String value);
        partial void Oncountry_nameChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_CountryRegion", "Regions")]
        public EntityCollection<Region> Regions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Region>("WineDataModel.FK_CountryRegion", "Regions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Region>("WineDataModel.FK_CountryRegion", "Regions", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineCountry", "Wines")]
        public EntityCollection<Wine> Wines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Wine>("WineDataModel.FK_WineCountry", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Wine>("WineDataModel.FK_WineCountry", "Wines", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="FriendStatus")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FriendStatus : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 FriendStatus 对象。
        /// </summary>
        /// <param name="friendStatusId">FriendStatusId 属性的初始值。</param>
        /// <param name="fromUserId">FromUserId 属性的初始值。</param>
        /// <param name="toUserId">ToUserId 属性的初始值。</param>
        /// <param name="statusId">StatusId 属性的初始值。</param>
        /// <param name="sentTime">SentTime 属性的初始值。</param>
        /// <param name="responseTime">ResponseTime 属性的初始值。</param>
        public static FriendStatus CreateFriendStatus(global::System.Int32 friendStatusId, global::System.Int32 fromUserId, global::System.Int32 toUserId, global::System.Byte statusId, global::System.DateTime sentTime, global::System.DateTime responseTime)
        {
            FriendStatus friendStatus = new FriendStatus();
            friendStatus.FriendStatusId = friendStatusId;
            friendStatus.FromUserId = fromUserId;
            friendStatus.ToUserId = toUserId;
            friendStatus.StatusId = statusId;
            friendStatus.SentTime = sentTime;
            friendStatus.ResponseTime = responseTime;
            return friendStatus;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FriendStatusId
        {
            get
            {
                return _FriendStatusId;
            }
            set
            {
                if (_FriendStatusId != value)
                {
                    OnFriendStatusIdChanging(value);
                    ReportPropertyChanging("FriendStatusId");
                    _FriendStatusId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FriendStatusId");
                    OnFriendStatusIdChanged();
                }
            }
        }
        private global::System.Int32 _FriendStatusId;
        partial void OnFriendStatusIdChanging(global::System.Int32 value);
        partial void OnFriendStatusIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FromUserId
        {
            get
            {
                return _FromUserId;
            }
            set
            {
                OnFromUserIdChanging(value);
                ReportPropertyChanging("FromUserId");
                _FromUserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromUserId");
                OnFromUserIdChanged();
            }
        }
        private global::System.Int32 _FromUserId;
        partial void OnFromUserIdChanging(global::System.Int32 value);
        partial void OnFromUserIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ToUserId
        {
            get
            {
                return _ToUserId;
            }
            set
            {
                OnToUserIdChanging(value);
                ReportPropertyChanging("ToUserId");
                _ToUserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToUserId");
                OnToUserIdChanged();
            }
        }
        private global::System.Int32 _ToUserId;
        partial void OnToUserIdChanging(global::System.Int32 value);
        partial void OnToUserIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte StatusId
        {
            get
            {
                return _StatusId;
            }
            set
            {
                OnStatusIdChanging(value);
                ReportPropertyChanging("StatusId");
                _StatusId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusId");
                OnStatusIdChanged();
            }
        }
        private global::System.Byte _StatusId;
        partial void OnStatusIdChanging(global::System.Byte value);
        partial void OnStatusIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SentTime
        {
            get
            {
                return _SentTime;
            }
            set
            {
                OnSentTimeChanging(value);
                ReportPropertyChanging("SentTime");
                _SentTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SentTime");
                OnSentTimeChanged();
            }
        }
        private global::System.DateTime _SentTime;
        partial void OnSentTimeChanging(global::System.DateTime value);
        partial void OnSentTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ResponseTime
        {
            get
            {
                return _ResponseTime;
            }
            set
            {
                OnResponseTimeChanging(value);
                ReportPropertyChanging("ResponseTime");
                _ResponseTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ResponseTime");
                OnResponseTimeChanged();
            }
        }
        private global::System.DateTime _ResponseTime;
        partial void OnResponseTimeChanging(global::System.DateTime value);
        partial void OnResponseTimeChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Mood")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Mood : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Mood 对象。
        /// </summary>
        /// <param name="mood_id">mood_id 属性的初始值。</param>
        /// <param name="mood_description">mood_description 属性的初始值。</param>
        /// <param name="wine_code">wine_code 属性的初始值。</param>
        public static Mood CreateMood(global::System.Int32 mood_id, global::System.String mood_description, global::System.String wine_code)
        {
            Mood mood = new Mood();
            mood.mood_id = mood_id;
            mood.mood_description = mood_description;
            mood.wine_code = wine_code;
            return mood;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 mood_id
        {
            get
            {
                return _mood_id;
            }
            set
            {
                if (_mood_id != value)
                {
                    Onmood_idChanging(value);
                    ReportPropertyChanging("mood_id");
                    _mood_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("mood_id");
                    Onmood_idChanged();
                }
            }
        }
        private global::System.Int32 _mood_id;
        partial void Onmood_idChanging(global::System.Int32 value);
        partial void Onmood_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String mood_description
        {
            get
            {
                return _mood_description;
            }
            set
            {
                Onmood_descriptionChanging(value);
                ReportPropertyChanging("mood_description");
                _mood_description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("mood_description");
                Onmood_descriptionChanged();
            }
        }
        private global::System.String _mood_description;
        partial void Onmood_descriptionChanging(global::System.String value);
        partial void Onmood_descriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String wine_code
        {
            get
            {
                return _wine_code;
            }
            set
            {
                Onwine_codeChanging(value);
                ReportPropertyChanging("wine_code");
                _wine_code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("wine_code");
                Onwine_codeChanged();
            }
        }
        private global::System.String _wine_code;
        partial void Onwine_codeChanging(global::System.String value);
        partial void Onwine_codeChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_MoodWMMW", "WMMWs")]
        public EntityCollection<WMMW> WMMWs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WMMW>("WineDataModel.FK_MoodWMMW", "WMMWs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WMMW>("WineDataModel.FK_MoodWMMW", "WMMWs", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Post")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Post : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Post 对象。
        /// </summary>
        /// <param name="post_id">post_id 属性的初始值。</param>
        /// <param name="wine_code">wine_code 属性的初始值。</param>
        /// <param name="user_code">user_code 属性的初始值。</param>
        /// <param name="texts">texts 属性的初始值。</param>
        /// <param name="post_date">post_date 属性的初始值。</param>
        /// <param name="post_ip">post_ip 属性的初始值。</param>
        public static Post CreatePost(global::System.Int32 post_id, global::System.Int32 wine_code, global::System.Int32 user_code, global::System.String texts, global::System.DateTime post_date, global::System.String post_ip)
        {
            Post post = new Post();
            post.post_id = post_id;
            post.wine_code = wine_code;
            post.user_code = user_code;
            post.texts = texts;
            post.post_date = post_date;
            post.post_ip = post_ip;
            return post;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 post_id
        {
            get
            {
                return _post_id;
            }
            set
            {
                if (_post_id != value)
                {
                    Onpost_idChanging(value);
                    ReportPropertyChanging("post_id");
                    _post_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("post_id");
                    Onpost_idChanged();
                }
            }
        }
        private global::System.Int32 _post_id;
        partial void Onpost_idChanging(global::System.Int32 value);
        partial void Onpost_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 wine_code
        {
            get
            {
                return _wine_code;
            }
            set
            {
                Onwine_codeChanging(value);
                ReportPropertyChanging("wine_code");
                _wine_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("wine_code");
                Onwine_codeChanged();
            }
        }
        private global::System.Int32 _wine_code;
        partial void Onwine_codeChanging(global::System.Int32 value);
        partial void Onwine_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 user_code
        {
            get
            {
                return _user_code;
            }
            set
            {
                Onuser_codeChanging(value);
                ReportPropertyChanging("user_code");
                _user_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("user_code");
                Onuser_codeChanged();
            }
        }
        private global::System.Int32 _user_code;
        partial void Onuser_codeChanging(global::System.Int32 value);
        partial void Onuser_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String texts
        {
            get
            {
                return _texts;
            }
            set
            {
                OntextsChanging(value);
                ReportPropertyChanging("texts");
                _texts = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("texts");
                OntextsChanged();
            }
        }
        private global::System.String _texts;
        partial void OntextsChanging(global::System.String value);
        partial void OntextsChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime post_date
        {
            get
            {
                return _post_date;
            }
            set
            {
                Onpost_dateChanging(value);
                ReportPropertyChanging("post_date");
                _post_date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("post_date");
                Onpost_dateChanged();
            }
        }
        private global::System.DateTime _post_date;
        partial void Onpost_dateChanging(global::System.DateTime value);
        partial void Onpost_dateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String post_ip
        {
            get
            {
                return _post_ip;
            }
            set
            {
                Onpost_ipChanging(value);
                ReportPropertyChanging("post_ip");
                _post_ip = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("post_ip");
                Onpost_ipChanged();
            }
        }
        private global::System.String _post_ip;
        partial void Onpost_ipChanging(global::System.String value);
        partial void Onpost_ipChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_PostReply", "Replies")]
        public EntityCollection<Reply> Replies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Reply>("WineDataModel.FK_PostReply", "Replies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Reply>("WineDataModel.FK_PostReply", "Replies", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_UserPost", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserPost", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserPost", "Users").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserPost", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("WineDataModel.FK_UserPost", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Region")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Region : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Region 对象。
        /// </summary>
        /// <param name="region_id">region_id 属性的初始值。</param>
        /// <param name="country_code">country_code 属性的初始值。</param>
        /// <param name="name">name 属性的初始值。</param>
        public static Region CreateRegion(global::System.Int32 region_id, global::System.Int32 country_code, global::System.String name)
        {
            Region region = new Region();
            region.region_id = region_id;
            region.country_code = country_code;
            region.name = name;
            return region;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 region_id
        {
            get
            {
                return _region_id;
            }
            set
            {
                if (_region_id != value)
                {
                    Onregion_idChanging(value);
                    ReportPropertyChanging("region_id");
                    _region_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("region_id");
                    Onregion_idChanged();
                }
            }
        }
        private global::System.Int32 _region_id;
        partial void Onregion_idChanging(global::System.Int32 value);
        partial void Onregion_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 country_code
        {
            get
            {
                return _country_code;
            }
            set
            {
                Oncountry_codeChanging(value);
                ReportPropertyChanging("country_code");
                _country_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("country_code");
                Oncountry_codeChanged();
            }
        }
        private global::System.Int32 _country_code;
        partial void Oncountry_codeChanging(global::System.Int32 value);
        partial void Oncountry_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_CountryRegion", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_CountryRegion", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_CountryRegion", "Countries").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_CountryRegion", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("WineDataModel.FK_CountryRegion", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineRegion", "Wines")]
        public EntityCollection<Wine> Wines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Wine>("WineDataModel.FK_WineRegion", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Wine>("WineDataModel.FK_WineRegion", "Wines", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Reply")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Reply : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Reply 对象。
        /// </summary>
        /// <param name="reply_id">reply_id 属性的初始值。</param>
        /// <param name="post_code">post_code 属性的初始值。</param>
        /// <param name="texts">texts 属性的初始值。</param>
        /// <param name="user_code">user_code 属性的初始值。</param>
        /// <param name="post_date">post_date 属性的初始值。</param>
        /// <param name="post_ip">post_ip 属性的初始值。</param>
        public static Reply CreateReply(global::System.Int32 reply_id, global::System.Int32 post_code, global::System.String texts, global::System.Int32 user_code, global::System.DateTime post_date, global::System.String post_ip)
        {
            Reply reply = new Reply();
            reply.reply_id = reply_id;
            reply.post_code = post_code;
            reply.texts = texts;
            reply.user_code = user_code;
            reply.post_date = post_date;
            reply.post_ip = post_ip;
            return reply;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 reply_id
        {
            get
            {
                return _reply_id;
            }
            set
            {
                if (_reply_id != value)
                {
                    Onreply_idChanging(value);
                    ReportPropertyChanging("reply_id");
                    _reply_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("reply_id");
                    Onreply_idChanged();
                }
            }
        }
        private global::System.Int32 _reply_id;
        partial void Onreply_idChanging(global::System.Int32 value);
        partial void Onreply_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 post_code
        {
            get
            {
                return _post_code;
            }
            set
            {
                Onpost_codeChanging(value);
                ReportPropertyChanging("post_code");
                _post_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("post_code");
                Onpost_codeChanged();
            }
        }
        private global::System.Int32 _post_code;
        partial void Onpost_codeChanging(global::System.Int32 value);
        partial void Onpost_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String texts
        {
            get
            {
                return _texts;
            }
            set
            {
                OntextsChanging(value);
                ReportPropertyChanging("texts");
                _texts = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("texts");
                OntextsChanged();
            }
        }
        private global::System.String _texts;
        partial void OntextsChanging(global::System.String value);
        partial void OntextsChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 user_code
        {
            get
            {
                return _user_code;
            }
            set
            {
                Onuser_codeChanging(value);
                ReportPropertyChanging("user_code");
                _user_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("user_code");
                Onuser_codeChanged();
            }
        }
        private global::System.Int32 _user_code;
        partial void Onuser_codeChanging(global::System.Int32 value);
        partial void Onuser_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime post_date
        {
            get
            {
                return _post_date;
            }
            set
            {
                Onpost_dateChanging(value);
                ReportPropertyChanging("post_date");
                _post_date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("post_date");
                Onpost_dateChanged();
            }
        }
        private global::System.DateTime _post_date;
        partial void Onpost_dateChanging(global::System.DateTime value);
        partial void Onpost_dateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String post_ip
        {
            get
            {
                return _post_ip;
            }
            set
            {
                Onpost_ipChanging(value);
                ReportPropertyChanging("post_ip");
                _post_ip = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("post_ip");
                Onpost_ipChanged();
            }
        }
        private global::System.String _post_ip;
        partial void Onpost_ipChanging(global::System.String value);
        partial void Onpost_ipChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_PostReply", "Posts")]
        public Post Post
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("WineDataModel.FK_PostReply", "Posts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("WineDataModel.FK_PostReply", "Posts").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Post> PostReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("WineDataModel.FK_PostReply", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Post>("WineDataModel.FK_PostReply", "Posts", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_UserReply", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserReply", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserReply", "Users").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("WineDataModel.FK_UserReply", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("WineDataModel.FK_UserReply", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="sim_mat")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sim_mat : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 sim_mat 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="agePercent">agePercent 属性的初始值。</param>
        /// <param name="wine_sim">wine_sim 属性的初始值。</param>
        /// <param name="simPercent">simPercent 属性的初始值。</param>
        public static sim_mat Createsim_mat(global::System.Int32 id, global::System.Decimal agePercent, global::System.String wine_sim, global::System.Decimal simPercent)
        {
            sim_mat sim_mat = new sim_mat();
            sim_mat.ID = id;
            sim_mat.agePercent = agePercent;
            sim_mat.wine_sim = wine_sim;
            sim_mat.simPercent = simPercent;
            return sim_mat;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal agePercent
        {
            get
            {
                return _agePercent;
            }
            set
            {
                OnagePercentChanging(value);
                ReportPropertyChanging("agePercent");
                _agePercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("agePercent");
                OnagePercentChanged();
            }
        }
        private global::System.Decimal _agePercent;
        partial void OnagePercentChanging(global::System.Decimal value);
        partial void OnagePercentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String wine_sim
        {
            get
            {
                return _wine_sim;
            }
            set
            {
                Onwine_simChanging(value);
                ReportPropertyChanging("wine_sim");
                _wine_sim = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("wine_sim");
                Onwine_simChanged();
            }
        }
        private global::System.String _wine_sim;
        partial void Onwine_simChanging(global::System.String value);
        partial void Onwine_simChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal simPercent
        {
            get
            {
                return _simPercent;
            }
            set
            {
                OnsimPercentChanging(value);
                ReportPropertyChanging("simPercent");
                _simPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("simPercent");
                OnsimPercentChanged();
            }
        }
        private global::System.Decimal _simPercent;
        partial void OnsimPercentChanging(global::System.Decimal value);
        partial void OnsimPercentChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Taste")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Taste : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Taste 对象。
        /// </summary>
        /// <param name="taste_id">taste_id 属性的初始值。</param>
        /// <param name="color_code">color_code 属性的初始值。</param>
        /// <param name="taste_description">taste_description 属性的初始值。</param>
        public static Taste CreateTaste(global::System.Int32 taste_id, global::System.Int32 color_code, global::System.String taste_description)
        {
            Taste taste = new Taste();
            taste.taste_id = taste_id;
            taste.color_code = color_code;
            taste.taste_description = taste_description;
            return taste;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 taste_id
        {
            get
            {
                return _taste_id;
            }
            set
            {
                if (_taste_id != value)
                {
                    Ontaste_idChanging(value);
                    ReportPropertyChanging("taste_id");
                    _taste_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("taste_id");
                    Ontaste_idChanged();
                }
            }
        }
        private global::System.Int32 _taste_id;
        partial void Ontaste_idChanging(global::System.Int32 value);
        partial void Ontaste_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 color_code
        {
            get
            {
                return _color_code;
            }
            set
            {
                Oncolor_codeChanging(value);
                ReportPropertyChanging("color_code");
                _color_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("color_code");
                Oncolor_codeChanged();
            }
        }
        private global::System.Int32 _color_code;
        partial void Oncolor_codeChanging(global::System.Int32 value);
        partial void Oncolor_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String taste_description
        {
            get
            {
                return _taste_description;
            }
            set
            {
                Ontaste_descriptionChanging(value);
                ReportPropertyChanging("taste_description");
                _taste_description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("taste_description");
                Ontaste_descriptionChanged();
            }
        }
        private global::System.String _taste_description;
        partial void Ontaste_descriptionChanging(global::System.String value);
        partial void Ontaste_descriptionChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineTaste", "Wines")]
        public EntityCollection<Wine> Wines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Wine>("WineDataModel.FK_WineTaste", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Wine>("WineDataModel.FK_WineTaste", "Wines", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 User 对象。
        /// </summary>
        /// <param name="user_id">user_id 属性的初始值。</param>
        /// <param name="nickname">nickname 属性的初始值。</param>
        /// <param name="password">password 属性的初始值。</param>
        /// <param name="email">email 属性的初始值。</param>
        /// <param name="reg_date">reg_date 属性的初始值。</param>
        /// <param name="reg_ip">reg_ip 属性的初始值。</param>
        public static User CreateUser(global::System.Int32 user_id, global::System.String nickname, global::System.String password, global::System.String email, global::System.DateTime reg_date, global::System.String reg_ip)
        {
            User user = new User();
            user.user_id = user_id;
            user.nickname = nickname;
            user.password = password;
            user.email = email;
            user.reg_date = reg_date;
            user.reg_ip = reg_ip;
            return user;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 user_id
        {
            get
            {
                return _user_id;
            }
            set
            {
                if (_user_id != value)
                {
                    Onuser_idChanging(value);
                    ReportPropertyChanging("user_id");
                    _user_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("user_id");
                    Onuser_idChanged();
                }
            }
        }
        private global::System.Int32 _user_id;
        partial void Onuser_idChanging(global::System.Int32 value);
        partial void Onuser_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String nickname
        {
            get
            {
                return _nickname;
            }
            set
            {
                OnnicknameChanging(value);
                ReportPropertyChanging("nickname");
                _nickname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("nickname");
                OnnicknameChanged();
            }
        }
        private global::System.String _nickname;
        partial void OnnicknameChanging(global::System.String value);
        partial void OnnicknameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String password
        {
            get
            {
                return _password;
            }
            set
            {
                OnpasswordChanging(value);
                ReportPropertyChanging("password");
                _password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("password");
                OnpasswordChanged();
            }
        }
        private global::System.String _password;
        partial void OnpasswordChanging(global::System.String value);
        partial void OnpasswordChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String email
        {
            get
            {
                return _email;
            }
            set
            {
                OnemailChanging(value);
                ReportPropertyChanging("email");
                _email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("email");
                OnemailChanged();
            }
        }
        private global::System.String _email;
        partial void OnemailChanging(global::System.String value);
        partial void OnemailChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime reg_date
        {
            get
            {
                return _reg_date;
            }
            set
            {
                Onreg_dateChanging(value);
                ReportPropertyChanging("reg_date");
                _reg_date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("reg_date");
                Onreg_dateChanged();
            }
        }
        private global::System.DateTime _reg_date;
        partial void Onreg_dateChanging(global::System.DateTime value);
        partial void Onreg_dateChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String reg_ip
        {
            get
            {
                return _reg_ip;
            }
            set
            {
                Onreg_ipChanging(value);
                ReportPropertyChanging("reg_ip");
                _reg_ip = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("reg_ip");
                Onreg_ipChanged();
            }
        }
        private global::System.String _reg_ip;
        partial void Onreg_ipChanging(global::System.String value);
        partial void Onreg_ipChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_UserPost", "Posts")]
        public EntityCollection<Post> Posts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Post>("WineDataModel.FK_UserPost", "Posts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Post>("WineDataModel.FK_UserPost", "Posts", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_UserReply", "Replies")]
        public EntityCollection<Reply> Replies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Reply>("WineDataModel.FK_UserReply", "Replies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Reply>("WineDataModel.FK_UserReply", "Replies", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Wine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Wine : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Wine 对象。
        /// </summary>
        /// <param name="wine_id">wine_id 属性的初始值。</param>
        /// <param name="mood_code">mood_code 属性的初始值。</param>
        /// <param name="taste_code">taste_code 属性的初始值。</param>
        /// <param name="color_code">color_code 属性的初始值。</param>
        /// <param name="years_code">years_code 属性的初始值。</param>
        /// <param name="country_code">country_code 属性的初始值。</param>
        /// <param name="region_code">region_code 属性的初始值。</param>
        /// <param name="name">name 属性的初始值。</param>
        /// <param name="description">description 属性的初始值。</param>
        /// <param name="pic_url">pic_url 属性的初始值。</param>
        /// <param name="price">price 属性的初始值。</param>
        public static Wine CreateWine(global::System.Int32 wine_id, global::System.Int32 mood_code, global::System.Int32 taste_code, global::System.Int32 color_code, global::System.Int32 years_code, global::System.Int32 country_code, global::System.Int32 region_code, global::System.String name, global::System.String description, global::System.String pic_url, global::System.String price)
        {
            Wine wine = new Wine();
            wine.wine_id = wine_id;
            wine.mood_code = mood_code;
            wine.taste_code = taste_code;
            wine.color_code = color_code;
            wine.years_code = years_code;
            wine.country_code = country_code;
            wine.region_code = region_code;
            wine.name = name;
            wine.description = description;
            wine.pic_url = pic_url;
            wine.price = price;
            return wine;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 wine_id
        {
            get
            {
                return _wine_id;
            }
            set
            {
                if (_wine_id != value)
                {
                    Onwine_idChanging(value);
                    ReportPropertyChanging("wine_id");
                    _wine_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("wine_id");
                    Onwine_idChanged();
                }
            }
        }
        private global::System.Int32 _wine_id;
        partial void Onwine_idChanging(global::System.Int32 value);
        partial void Onwine_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 mood_code
        {
            get
            {
                return _mood_code;
            }
            set
            {
                Onmood_codeChanging(value);
                ReportPropertyChanging("mood_code");
                _mood_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("mood_code");
                Onmood_codeChanged();
            }
        }
        private global::System.Int32 _mood_code;
        partial void Onmood_codeChanging(global::System.Int32 value);
        partial void Onmood_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 taste_code
        {
            get
            {
                return _taste_code;
            }
            set
            {
                Ontaste_codeChanging(value);
                ReportPropertyChanging("taste_code");
                _taste_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("taste_code");
                Ontaste_codeChanged();
            }
        }
        private global::System.Int32 _taste_code;
        partial void Ontaste_codeChanging(global::System.Int32 value);
        partial void Ontaste_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 color_code
        {
            get
            {
                return _color_code;
            }
            set
            {
                Oncolor_codeChanging(value);
                ReportPropertyChanging("color_code");
                _color_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("color_code");
                Oncolor_codeChanged();
            }
        }
        private global::System.Int32 _color_code;
        partial void Oncolor_codeChanging(global::System.Int32 value);
        partial void Oncolor_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 years_code
        {
            get
            {
                return _years_code;
            }
            set
            {
                Onyears_codeChanging(value);
                ReportPropertyChanging("years_code");
                _years_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("years_code");
                Onyears_codeChanged();
            }
        }
        private global::System.Int32 _years_code;
        partial void Onyears_codeChanging(global::System.Int32 value);
        partial void Onyears_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 country_code
        {
            get
            {
                return _country_code;
            }
            set
            {
                Oncountry_codeChanging(value);
                ReportPropertyChanging("country_code");
                _country_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("country_code");
                Oncountry_codeChanged();
            }
        }
        private global::System.Int32 _country_code;
        partial void Oncountry_codeChanging(global::System.Int32 value);
        partial void Oncountry_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 region_code
        {
            get
            {
                return _region_code;
            }
            set
            {
                Onregion_codeChanging(value);
                ReportPropertyChanging("region_code");
                _region_code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("region_code");
                Onregion_codeChanged();
            }
        }
        private global::System.Int32 _region_code;
        partial void Onregion_codeChanging(global::System.Int32 value);
        partial void Onregion_codeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String description
        {
            get
            {
                return _description;
            }
            set
            {
                OndescriptionChanging(value);
                ReportPropertyChanging("description");
                _description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("description");
                OndescriptionChanged();
            }
        }
        private global::System.String _description;
        partial void OndescriptionChanging(global::System.String value);
        partial void OndescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String pic_url
        {
            get
            {
                return _pic_url;
            }
            set
            {
                Onpic_urlChanging(value);
                ReportPropertyChanging("pic_url");
                _pic_url = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("pic_url");
                Onpic_urlChanged();
            }
        }
        private global::System.String _pic_url;
        partial void Onpic_urlChanging(global::System.String value);
        partial void Onpic_urlChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String price
        {
            get
            {
                return _price;
            }
            set
            {
                OnpriceChanging(value);
                ReportPropertyChanging("price");
                _price = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("price");
                OnpriceChanged();
            }
        }
        private global::System.String _price;
        partial void OnpriceChanging(global::System.String value);
        partial void OnpriceChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineColor", "Colors")]
        public Color Color
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("WineDataModel.FK_WineColor", "Colors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("WineDataModel.FK_WineColor", "Colors").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Color> ColorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("WineDataModel.FK_WineColor", "Colors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Color>("WineDataModel.FK_WineColor", "Colors", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineCountry", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_WineCountry", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_WineCountry", "Countries").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("WineDataModel.FK_WineCountry", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("WineDataModel.FK_WineCountry", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineRegion", "Regions")]
        public Region Region
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("WineDataModel.FK_WineRegion", "Regions").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("WineDataModel.FK_WineRegion", "Regions").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Region> RegionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("WineDataModel.FK_WineRegion", "Regions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Region>("WineDataModel.FK_WineRegion", "Regions", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineTaste", "Tastes")]
        public Taste Taste
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Taste>("WineDataModel.FK_WineTaste", "Tastes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Taste>("WineDataModel.FK_WineTaste", "Tastes").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Taste> TasteReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Taste>("WineDataModel.FK_WineTaste", "Tastes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Taste>("WineDataModel.FK_WineTaste", "Tastes", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineWMMW", "WMMWs")]
        public EntityCollection<WMMW> WMMWs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WMMW>("WineDataModel.FK_WineWMMW", "WMMWs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WMMW>("WineDataModel.FK_WineWMMW", "WMMWs", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineYear", "Years")]
        public Year Year
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Year>("WineDataModel.FK_WineYear", "Years").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Year>("WineDataModel.FK_WineYear", "Years").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Year> YearReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Year>("WineDataModel.FK_WineYear", "Years");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Year>("WineDataModel.FK_WineYear", "Years", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="WMMW")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WMMW : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 WMMW 对象。
        /// </summary>
        /// <param name="wineId">WineId 属性的初始值。</param>
        /// <param name="moodId">MoodId 属性的初始值。</param>
        /// <param name="id">ID 属性的初始值。</param>
        public static WMMW CreateWMMW(global::System.Int32 wineId, global::System.Int32 moodId, global::System.Int32 id)
        {
            WMMW wMMW = new WMMW();
            wMMW.WineId = wineId;
            wMMW.MoodId = moodId;
            wMMW.ID = id;
            return wMMW;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WineId
        {
            get
            {
                return _WineId;
            }
            set
            {
                OnWineIdChanging(value);
                ReportPropertyChanging("WineId");
                _WineId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WineId");
                OnWineIdChanged();
            }
        }
        private global::System.Int32 _WineId;
        partial void OnWineIdChanging(global::System.Int32 value);
        partial void OnWineIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MoodId
        {
            get
            {
                return _MoodId;
            }
            set
            {
                OnMoodIdChanging(value);
                ReportPropertyChanging("MoodId");
                _MoodId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MoodId");
                OnMoodIdChanged();
            }
        }
        private global::System.Int32 _MoodId;
        partial void OnMoodIdChanging(global::System.Int32 value);
        partial void OnMoodIdChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_MoodWMMW", "Moods")]
        public Mood Mood
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Mood>("WineDataModel.FK_MoodWMMW", "Moods").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Mood>("WineDataModel.FK_MoodWMMW", "Moods").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Mood> MoodReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Mood>("WineDataModel.FK_MoodWMMW", "Moods");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Mood>("WineDataModel.FK_MoodWMMW", "Moods", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineWMMW", "Wines")]
        public Wine Wine
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Wine>("WineDataModel.FK_WineWMMW", "Wines").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Wine>("WineDataModel.FK_WineWMMW", "Wines").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Wine> WineReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Wine>("WineDataModel.FK_WineWMMW", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Wine>("WineDataModel.FK_WineWMMW", "Wines", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="WineDataModel", Name="Year")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Year : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Year 对象。
        /// </summary>
        /// <param name="year_id">year_id 属性的初始值。</param>
        public static Year CreateYear(global::System.Int32 year_id)
        {
            Year year = new Year();
            year.year_id = year_id;
            return year;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 year_id
        {
            get
            {
                return _year_id;
            }
            set
            {
                if (_year_id != value)
                {
                    Onyear_idChanging(value);
                    ReportPropertyChanging("year_id");
                    _year_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("year_id");
                    Onyear_idChanged();
                }
            }
        }
        private global::System.Int32 _year_id;
        partial void Onyear_idChanging(global::System.Int32 value);
        partial void Onyear_idChanged();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("WineDataModel", "FK_WineYear", "Wines")]
        public EntityCollection<Wine> Wines
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Wine>("WineDataModel.FK_WineYear", "Wines");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Wine>("WineDataModel.FK_WineYear", "Wines", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
