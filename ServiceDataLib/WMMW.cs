//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace ServiceDataLib
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Mood))]
    [KnownType(typeof(Wine))]
    public partial class WMMW
    {
        #region Primitive Properties
        [DataMember]
        public virtual int WineId
        {
            get { return _wineId; }
            set
            {
                if (_wineId != value)
                {
                    if (Wine != null && Wine.wine_id != value)
                    {
                        Wine = null;
                    }
                    _wineId = value;
                }
            }
        }
        private int _wineId;
        [DataMember]
        public virtual int MoodId
        {
            get { return _moodId; }
            set
            {
                if (_moodId != value)
                {
                    if (Mood != null && Mood.mood_id != value)
                    {
                        Mood = null;
                    }
                    _moodId = value;
                }
            }
        }
        private int _moodId;
        [DataMember]
        public virtual int ID
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
        
    
        [DataMember]
        public virtual Mood Mood
        {
            get { return _mood; }
            set
            {
                if (!ReferenceEquals(_mood, value))
                {
                    var previousValue = _mood;
                    _mood = value;
                    FixupMood(previousValue);
                }
            }
        }
        private Mood _mood;
        
    
        [DataMember]
        public virtual Wine Wine
        {
            get { return _wine; }
            set
            {
                if (!ReferenceEquals(_wine, value))
                {
                    var previousValue = _wine;
                    _wine = value;
                    FixupWine(previousValue);
                }
            }
        }
        private Wine _wine;

        #endregion
        #region Association Fixup
    
        private void FixupMood(Mood previousValue)
        {
            if (previousValue != null && previousValue.WMMWs.Contains(this))
            {
                previousValue.WMMWs.Remove(this);
            }
    
            if (Mood != null)
            {
                if (!Mood.WMMWs.Contains(this))
                {
                    Mood.WMMWs.Add(this);
                }
                if (MoodId != Mood.mood_id)
                {
                    MoodId = Mood.mood_id;
                }
            }
        }
    
        private void FixupWine(Wine previousValue)
        {
            if (previousValue != null && previousValue.WMMWs.Contains(this))
            {
                previousValue.WMMWs.Remove(this);
            }
    
            if (Wine != null)
            {
                if (!Wine.WMMWs.Contains(this))
                {
                    Wine.WMMWs.Add(this);
                }
                if (WineId != Wine.wine_id)
                {
                    WineId = Wine.wine_id;
                }
            }
        }

        #endregion
    }
}
